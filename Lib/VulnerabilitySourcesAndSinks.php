<?php
// securing in if clauses for every vulnerability
$SECURING_IN_IFS=array(
    'is_double',
    'is_float',
    'is_real',
    'is_long',
    'is_int',
    'is_integer',
    'is_numeric',
    'ctype_alnum',
    'ctype_alpha',
    'ctype_cntrl',
    'ctype_digit',
    'ctype_xdigit',
    'ctype_upper',
    'ctype_lower',
    'ctype_space'
);

// securing functions for every vulnerability
$SECURING_ALL=array(
    'intval',
    'floatval',
    'doubleval',
    'filter_input',
    'urlencode',
    'rawurlencode',
    'round',
    'floor',
    'strlen',
    'hexdec',
    'strrpos',
    'strpos',
    'md5',
    'sha1',
    'crypt',
    'crc32',
    'base64_encode',
    'ord',
    'sizeof',
    'count',
    'bin2hex',
    'levenshtein',
    'abs',
    'bindec',
    'decbin',
    'hexdec',
    'rand',
    'max',
    'min'
);

// functions that insecures the string again
$INSECURING_USERINPUT=array(
    'rawurldecode',
    'urldecode',
    'base64_decode',
    'html_entity_decode',
    'str_rot13',
    'chr'
);

// securing functions for XSS
$SECURING_XSS=array(
    'htmlentities',
    'htmlspecialchars'
);

// securing functions for SQLi
$SECURING_SQL=array(
    'addslashes',
    'dbx_escape_string',
    'db2_escape_string',
    'ingres_escape_string',
    'maxdb_escape_string',
    'maxdb_real_escape_string',
    //'mysql_escape_string',
    'mysql_real_escape_string',
    'mysqli_escape_string',
    'mysqli_real_escape_string',
    'pg_escape_string',
    'pg_escape_bytea',
    'sqlite_escape_string',
    'sqlite_udf_encode_binary'
);